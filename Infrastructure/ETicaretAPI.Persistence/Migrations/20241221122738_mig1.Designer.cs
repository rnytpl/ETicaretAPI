// <auto-generated />
using System;
using ETicaretAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ETicaretAPI.Persistence.Migrations
{
    [DbContext(typeof(ETicaretAPIDbContext))]
    [Migration("20241221122738_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppRoleEndpoint", b =>
                {
                    b.Property<Guid>("EndpointsId")
                        .HasColumnType("uuid");

                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.HasKey("EndpointsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AppRoleEndpoint");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.CompletedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("CompletedOrders");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HttpType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Endpoints");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8982a65-8828-4715-b17b-496da729ef9a"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 38, 45, DateTimeKind.Utc).AddTicks(9051),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 1",
                            Price = 1f,
                            Stock = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("06f98894-732c-4cb5-80e2-cc3b037805e1"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 39, 45, DateTimeKind.Utc).AddTicks(9059),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 2",
                            Price = 2f,
                            Stock = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5015fdcf-078a-401f-8261-b4f4710d7d22"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 40, 45, DateTimeKind.Utc).AddTicks(9060),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 3",
                            Price = 3f,
                            Stock = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("741cdc91-7422-47f3-ae69-09983686ac9c"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 41, 45, DateTimeKind.Utc).AddTicks(9062),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 4",
                            Price = 4f,
                            Stock = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("56e0226b-3c38-4ff3-b350-12365bd16da7"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 42, 45, DateTimeKind.Utc).AddTicks(9064),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 5",
                            Price = 5f,
                            Stock = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf7608a4-fde3-46f2-9514-76a975e5bc5f"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 43, 45, DateTimeKind.Utc).AddTicks(9065),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 6",
                            Price = 6f,
                            Stock = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("722126c8-4c8d-4cc0-8435-2ac0548c855b"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 44, 45, DateTimeKind.Utc).AddTicks(9080),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 7",
                            Price = 7f,
                            Stock = 7,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e2133344-417f-4633-9aea-04c5d1da5dba"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 45, 45, DateTimeKind.Utc).AddTicks(9082),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 8",
                            Price = 8f,
                            Stock = 8,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("080f49d2-9e1b-4c5b-92b1-6e68c8797064"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 46, 45, DateTimeKind.Utc).AddTicks(9084),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 9",
                            Price = 9f,
                            Stock = 9,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("86beb608-871a-4105-848d-318f8847cfe4"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 47, 45, DateTimeKind.Utc).AddTicks(9088),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 10",
                            Price = 10f,
                            Stock = 10,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c4972d0-203c-4fd7-9caa-f40c4b0471c3"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 48, 45, DateTimeKind.Utc).AddTicks(9091),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 11",
                            Price = 11f,
                            Stock = 11,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b03bf9a7-c9e9-4357-b686-dee3360c7a3c"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 49, 45, DateTimeKind.Utc).AddTicks(9093),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 12",
                            Price = 12f,
                            Stock = 12,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9bb563a-c4c4-4a9b-9339-231a0d292cfd"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 50, 45, DateTimeKind.Utc).AddTicks(9095),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 13",
                            Price = 13f,
                            Stock = 13,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("82068b35-1f97-430f-9bb3-bcc218c97a0a"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 51, 45, DateTimeKind.Utc).AddTicks(9097),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 14",
                            Price = 14f,
                            Stock = 14,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0fb40992-b702-499d-9a15-ef5d02063d1d"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 52, 45, DateTimeKind.Utc).AddTicks(9102),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 15",
                            Price = 15f,
                            Stock = 15,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4502854-a40b-4fcb-8387-71baf888cdaa"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 53, 45, DateTimeKind.Utc).AddTicks(9104),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 16",
                            Price = 16f,
                            Stock = 16,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27d257cc-326e-4072-94e1-899b8662c1ed"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 54, 45, DateTimeKind.Utc).AddTicks(9106),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 17",
                            Price = 17f,
                            Stock = 17,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("446a1ec5-baa9-40b3-8992-181d05138639"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 55, 45, DateTimeKind.Utc).AddTicks(9108),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 18",
                            Price = 18f,
                            Stock = 18,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7e98e120-2abf-4eaa-b3ef-bdf40afc29bc"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 56, 45, DateTimeKind.Utc).AddTicks(9110),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 19",
                            Price = 19f,
                            Stock = 19,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4981fc6c-9295-4af2-a0ea-d2d23352d25b"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 57, 45, DateTimeKind.Utc).AddTicks(9112),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 20",
                            Price = 20f,
                            Stock = 20,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fbde78a1-e189-42d7-b751-ffd334f1620e"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 58, 45, DateTimeKind.Utc).AddTicks(9114),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 21",
                            Price = 21f,
                            Stock = 21,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("82643079-3647-42a5-8fe8-c013d88602b8"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 27, 59, 45, DateTimeKind.Utc).AddTicks(9116),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 22",
                            Price = 22f,
                            Stock = 22,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("37d831a7-8318-4c87-b133-4b3133a9cbae"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 0, 45, DateTimeKind.Utc).AddTicks(9120),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 23",
                            Price = 23f,
                            Stock = 23,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1639b235-82e7-4410-92f1-5f4be2278994"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 1, 45, DateTimeKind.Utc).AddTicks(9122),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 24",
                            Price = 24f,
                            Stock = 24,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a91778b7-f074-45d6-afe9-f97249a7ecc2"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 2, 45, DateTimeKind.Utc).AddTicks(9125),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 25",
                            Price = 25f,
                            Stock = 25,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dd497706-e704-4113-a68f-63217fd8fd82"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 3, 45, DateTimeKind.Utc).AddTicks(9127),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 26",
                            Price = 26f,
                            Stock = 26,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b0a59ffa-1560-462b-9f32-12d0c888fbea"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 4, 45, DateTimeKind.Utc).AddTicks(9129),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 27",
                            Price = 27f,
                            Stock = 27,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fcdcac25-d005-408b-87c2-823d82a18d43"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 5, 45, DateTimeKind.Utc).AddTicks(9131),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 28",
                            Price = 28f,
                            Stock = 28,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ee80f3e-d965-4a92-a164-6295e649ebe7"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 6, 45, DateTimeKind.Utc).AddTicks(9133),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 29",
                            Price = 29f,
                            Stock = 29,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c26c5f3a-a852-42aa-887d-819b1dbc2f8d"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 7, 45, DateTimeKind.Utc).AddTicks(9135),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 30",
                            Price = 30f,
                            Stock = 30,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7b0d3322-9ee0-4665-9f94-9531fd5651d1"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 8, 45, DateTimeKind.Utc).AddTicks(9139),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 31",
                            Price = 31f,
                            Stock = 31,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("916dca98-1c3b-47c2-9fac-51c7fe91a464"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 9, 45, DateTimeKind.Utc).AddTicks(9207),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 32",
                            Price = 32f,
                            Stock = 32,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("da2f1808-0ca8-44ee-90ef-a9cbdd90d1ca"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 10, 45, DateTimeKind.Utc).AddTicks(9209),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 33",
                            Price = 33f,
                            Stock = 33,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ac9bb4b9-9f25-4847-874f-126c4f1f5e49"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 11, 45, DateTimeKind.Utc).AddTicks(9210),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 34",
                            Price = 34f,
                            Stock = 34,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("98c43b7d-a4de-4961-9c91-30bad7fb4456"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 12, 45, DateTimeKind.Utc).AddTicks(9212),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 35",
                            Price = 35f,
                            Stock = 35,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb398ecc-e88a-4fee-b218-18ce30947c8a"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 13, 45, DateTimeKind.Utc).AddTicks(9214),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 36",
                            Price = 36f,
                            Stock = 36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4bf97d69-54e4-4947-b138-6daea4f188a1"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 14, 45, DateTimeKind.Utc).AddTicks(9215),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 37",
                            Price = 37f,
                            Stock = 37,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("87006eca-dbfd-489f-b015-50564934fae4"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 15, 45, DateTimeKind.Utc).AddTicks(9217),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 38",
                            Price = 38f,
                            Stock = 38,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f150917b-3e0c-4d04-a168-27f16f3f7d24"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 16, 45, DateTimeKind.Utc).AddTicks(9220),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 39",
                            Price = 39f,
                            Stock = 39,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f27e0768-f401-4c6c-82fb-f323ad81db4b"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 17, 45, DateTimeKind.Utc).AddTicks(9222),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 40",
                            Price = 40f,
                            Stock = 40,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("111eebb3-74ba-4e92-81be-22a1af290d44"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 18, 45, DateTimeKind.Utc).AddTicks(9224),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 41",
                            Price = 41f,
                            Stock = 41,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c12a18fe-9f8f-43ca-8f21-0387907f1c8d"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 19, 45, DateTimeKind.Utc).AddTicks(9225),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 42",
                            Price = 42f,
                            Stock = 42,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("630ffcba-1346-457c-8ffb-c1198f2f9a74"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 20, 45, DateTimeKind.Utc).AddTicks(9227),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 43",
                            Price = 43f,
                            Stock = 43,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b570f014-132b-48de-a065-d35700eee1fb"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 21, 45, DateTimeKind.Utc).AddTicks(9229),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 44",
                            Price = 44f,
                            Stock = 44,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31e4946e-06ca-4978-858c-e497de0c5501"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 22, 45, DateTimeKind.Utc).AddTicks(9230),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 45",
                            Price = 45f,
                            Stock = 45,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0d1f3e7b-6291-44a6-ba65-8a6f7e558bd2"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 23, 45, DateTimeKind.Utc).AddTicks(9232),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 46",
                            Price = 46f,
                            Stock = 46,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ba7802f6-a7a5-4945-8f44-1866ad8768cc"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 24, 45, DateTimeKind.Utc).AddTicks(9235),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 47",
                            Price = 47f,
                            Stock = 47,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca12bca4-027f-40b6-b134-bbdb246afbb2"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 25, 45, DateTimeKind.Utc).AddTicks(9237),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 48",
                            Price = 48f,
                            Stock = 48,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("14d90990-0d72-4068-a736-7512b655634f"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 26, 45, DateTimeKind.Utc).AddTicks(9239),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 49",
                            Price = 49f,
                            Stock = 49,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7d1bb5a3-cd16-4d2d-90b1-c9d29b2c6501"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 27, 45, DateTimeKind.Utc).AddTicks(9240),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 50",
                            Price = 50f,
                            Stock = 50,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f5b39d61-79cd-4fad-97e4-ed013ed83185"),
                            CreatedDate = new DateTime(2024, 12, 21, 12, 28, 28, 45, DateTimeKind.Utc).AddTicks(9242),
                            Description = "A brief description of the product, highlighting its key features and benefits.",
                            Name = "Product 51",
                            Price = 51f,
                            Stock = 51,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.Property<Guid>("ProductImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductImageFilesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductImageFile");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.InvoiceFile", b =>
                {
                    b.HasBaseType("ETicaretAPI.Domain.Entities.File");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("InvoiceFile");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.ProductImageFile", b =>
                {
                    b.HasBaseType("ETicaretAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("ProductImageFile");
                });

            modelBuilder.Entity("AppRoleEndpoint", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Endpoint", null)
                        .WithMany()
                        .HasForeignKey("EndpointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Basket", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretAPI.Domain.Entities.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.CompletedOrder", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Order", "Order")
                        .WithOne("CompletedOrder")
                        .HasForeignKey("ETicaretAPI.Domain.Entities.CompletedOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Endpoint", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Menu", "Menu")
                        .WithMany("Endpoints")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("ETicaretAPI.Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.HasOne("ETicaretAPI.Domain.Entities.ProductImageFile", null)
                        .WithMany()
                        .HasForeignKey("ProductImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretAPI.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("CompletedOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("ETicaretAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BasketItems");
                });
#pragma warning restore 612, 618
        }
    }
}
